/**
 * @author gigatron
 */

require("dotenv").config();
const { Telegraf, Markup } = require("telegraf");
const axios = require("axios");

const connectDB = require("./database");
const Order = require("./orderModel");
const keepAlive = require("./keepAlive");

module.exports = createAndSaveOrder;

const bot = new Telegraf(process.env.BOT_TOKEN);
const adminId = process.env.ADMIN_ID;

connectDB();
keepAlive();

// Set of busy times
const busyTimes = new Set();

// Function to generate a unique order number
function generateOrderNumber(clientId) {
  const timestamp = Date.now().toString().slice(-6); // Use last 6 digits of current timestamp
  return `${clientId}${timestamp}`;
}

// Function to get channel statistics
async function getChannelStats(channelIdentifier) {
  try {
    let chatResponse;
    if (channelIdentifier.startsWith("@")) {
      const username = channelIdentifier.substring(1);
      chatResponse = await axios.get(
        `https://api.telegram.org/bot${process.env.BOT_TOKEN}/getChat`,
        { params: { chat_id: `@${username}` } }
      );
    } else if (channelIdentifier.startsWith("https://t.me/")) {
      const username = channelIdentifier.split("/").pop();
      chatResponse = await axios.get(
        `https://api.telegram.org/bot${process.env.BOT_TOKEN}/getChat`,
        { params: { chat_id: `@${username}` } }
      );
    } else {
      chatResponse = await axios.get(
        `https://api.telegram.org/bot${process.env.BOT_TOKEN}/getChat`,
        { params: { chat_id: `${channelIdentifier}` } }
      );
    }

    const chat = chatResponse.data.result;

    const countResponse = await axios.get(
      `https://api.telegram.org/bot${process.env.BOT_TOKEN}/getChatMembersCount`,
      { params: { chat_id: chat.id } }
    );
    const membersCount = countResponse.data.result;

    console.log(`–ö–∞–Ω–∞–ª: ${chat.title}`);
    console.log(`–ü–æ–¥–ø–∏—Å—á–∏–∫–∏: ${membersCount}`);

    return {
      title: chat.title,
      membersCount: membersCount,
      username: chat.username,
    };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞:", error);
    return { error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞." };
  }
}

// Function to send payment link for advertising services
async function sendPaymentLink(ctx, title, description, price, paymentLink) {
  try {
    const photoUrl =
      "https://media.discordapp.net/attachments/1253643242164195379/1253643318533951579/photo_2024-04-03_23-40-37.jpg?ex=667699d2&is=66754852&hm=d2516f06bfc2bdd3b728e6579e8afbcf9ba23a45f9e11f7e38f5111249380c24&=&format=webp&width=800&height=412"; // Replace with your image URL

    // Send message with image and "Pay" button
    await ctx.replyWithPhoto(
      { url: photoUrl },
      {
        caption: `–î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã , –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å ${price} —Ä—É–±–ª–µ–π.`,
        reply_markup: {
          inline_keyboard: [[Markup.button.url("–û–ø–ª–∞—Ç–∏—Ç—å", paymentLink)]],
        },
      }
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
}

// Bot launch
bot.start(async (ctx) => {
  await ctx.reply(`
‚Ä¢–ü–†–ê–ô–°‚Ä¢

12—á- 220 —Ä—É–±–ª–µ–π
24—á- 300 —Ä—É–±–ª–µ–π (+ —Ä–µ–∫–ª–∞–º–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ)

–∑–∞–∫—Ä–µ–ø ‚Ä¢ –ø–æ–¥–≥–æ–Ω - 20 —Ä—É–±–ª–µ–π
~–º–æ–≥—É –ø–æ–º–æ—á—å —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º

–≤–∞–∂–Ω–æ:

–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –ø—Ä–∏—Ö–æ–¥ —è –Ω–µ –Ω–µ—Å—É ‚Ä¢ –≤—Å—ë –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–µ–≥–æ —à–∞–±–ª–æ–Ω–∞ –∏ –∫–∞–Ω–∞–ª–∞ !

–ø–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –≤ –ª–∏—á–∫—É @Vernitedengi_00
<< –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª (https://t.me/vernitedengi_8) >>
`);

  await ctx.reply(
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:"
  );

  bot.context.waitingForChannelName = true;
});

// Text message handling
bot.on("text", async (ctx) => {
  if (ctx.message.text && bot.context.waitingForChannelName) {
    const channelIdentifier = ctx.message.text.trim();

    bot.context.waitingForChannelName = false;

    const stats = await getChannelStats(channelIdentifier);

    if (stats.error) {
      await ctx.reply(stats.error);
    } else if (stats.membersCount < 600) {
      await ctx.reply(
        "–í–∞—à –∫–∞–Ω–∞–ª –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–º–µ–Ω—å—à–µ 600 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ."
      );
    } else {
      let statsMessage = `–ö–∞–Ω–∞–ª: ${stats.title}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${stats.membersCount}`;

      if (stats.username) {
        statsMessage += `\nUsername: @${stats.username}`;
        bot.context.currentOrder = { selectedChannel: stats.username }; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —é–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞
      } else {
        statsMessage += `\n–ö–∞–Ω–∞–ª: https://t.me/${channelIdentifier}`;
        bot.context.currentOrder = {
          selectedChannel: `https://t.me/${channelIdentifier}`,
        }; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
      }

      const message = await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º —É–¥–æ–±–Ω–æ:", {
        reply_markup: {
          inline_keyboard: [
            [
              { text: "10:00", callback_data: "time_10:00" },
              { text: "16:00", callback_data: "time_16:00" },
              { text: "19:00", callback_data: "time_19:00" },
            ],
          ],
        },
      });

      bot.context.messageId = message.message_id;
    }
  }
});

// Callback actions handling
bot.action(/^time_.+/, async (ctx) => {
  const selectedTime = ctx.callbackQuery.data.split("_")[1];

  await ctx.editMessageReplyMarkup({
    inline_keyboard: [],
  });

  bot.context.selectedTime = selectedTime;
  bot.context.clientId = ctx.from.id; // Save client ID

  await ctx.reply(
    `–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è ${selectedTime}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º—ã:`,
    {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "12 —á–∞—Å–æ–≤",
              callback_data: `duration_12h_${selectedTime}`,
            },
            {
              text: "24 —á–∞—Å–∞",
              callback_data: `duration_24h_${selectedTime}`,
            },
          ],
        ],
      },
    }
  );
});

// Invoice handling and proof of payment request
bot.action(/^duration_.+/, async (ctx) => {
  const actionData = ctx.callbackQuery.data.split("_");
  const duration = actionData[1];
  const selectedTime = actionData[2];

  const orderNumber = generateOrderNumber(ctx.from.id);
  bot.context.duration = duration;
  bot.context.orderNumber = orderNumber;

  let title, description, payload, price, paymentLink;

  if (duration === "12h") {
    title = "GIGATRON";
    description = "–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –Ω–∞ 12 —á–∞—Å–æ–≤";
    price = "220";
    paymentLink = "https://yoomoney.ru/to/4100117907658443"; // Replace with your payment link for 12 hours
  } else if (duration === "24h") {
    title = "GIGATRON";
    description = "–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –Ω–∞ 24 —á–∞—Å–∞";
    price = "300";
    paymentLink = "https://yoomoney.ru/to/4100117907658443"; // Replace with your payment link for 24 hours
  }

  await sendPaymentLink(ctx, title, description, price, paymentLink);

  await ctx.answerCbQuery();

  // Notify the client about proof of payment request
  try {
    await ctx.reply(
      `–í–∞—à –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${orderNumber}. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞ ${duration} –≤ ${selectedTime}, —Å–∫–∏–Ω—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–± –æ–ø–ª–∞—Ç–µ, —É–∫–∞–∑–∞–≤ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏`
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –æ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–µ –æ–ø–ª–∞—Ç—ã:", error);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ (–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –æ–ø–ª–∞—Ç—ã)
bot.on("photo", async (ctx) => {
  const photoId = ctx.message.photo[ctx.message.photo.length - 1].file_id; // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ
  const selectedTime = bot.context.selectedTime;
  const duration = bot.context.duration;
  const orderNumber = bot.context.orderNumber;
  const channelIdentifier = bot.context.currentOrder.selectedChannel; // –ü–æ–ª—É—á–∞–µ–º channelIdentifier –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–æ—Ç–∞

  if (!channelIdentifier) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ª–∏ channelIdentifier
    console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞–∫–∞–∑–∞.");
    return;
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –õ–∞–π–∫/–î–∏–∑–ª–∞–π–∫
  await ctx.telegram.sendPhoto(adminId, photoId, {
    caption: `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∑–∞ ${duration} –≤ ${selectedTime} –¥–ª—è –∫–∞–Ω–∞–ª–∞ @${channelIdentifier} (–Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${orderNumber}):`,
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: "üëçüèª",
            callback_data: `confirm_payment_${orderNumber}`,
          },
          {
            text: "üëéüèª",
            callback_data: `reject_payment_${orderNumber}`,
          },
        ],
      ],
    },
  });

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ —Ç–æ–º, —á—Ç–æ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
  await ctx.reply(
    `–í–∞—à–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –æ–ø–ª–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${orderNumber}).`
  );

  // –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  bot.context.selectedTime = null;
  bot.context.duration = null;
  bot.context.orderNumber = null;
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function createAndSaveOrder(orderData) {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è selectedTime –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ Date, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    if (!orderData.selectedTime) {
      throw new Error("selectedTime is required.");
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const newOrder = new Order(orderData);

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const savedOrder = await newOrder.save();
    return savedOrder;
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: ${error.message}`);
  }
}

module.exports = createAndSaveOrder;

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–∞ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã)
bot.action(/^confirm_payment_.+/, async (ctx) => {
  const actionData = ctx.callbackQuery.data.split("_");
  const orderNumber = actionData[2];

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–æ—Ç–∞
  const clientId = bot.context.clientId;
  const username = ctx.callbackQuery.from.username;
  const selectedTime = bot.context.selectedTime;
  const duration = bot.context.duration;

  const channelIdentifier = bot.context.currentOrder.selectedChannel; // –ü–æ–ª—É—á–∞–µ–º channelIdentifier –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–æ—Ç–∞

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  const orderData = {
    orderNumber: orderNumber,
    clientId: clientId,
    username: `https://t.me/${username}`,
    channel: `https://t.me/${channelIdentifier} `,
    duration: duration === "24h" ? 24 : 12,
    selectedTime: new Date(selectedTime),
    title: "GIGATRON",
    description:
      duration === "24h"
        ? "–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –Ω–∞ 24 —á–∞—Å–∞"
        : "–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –Ω–∞ 12 —á–∞—Å–æ–≤",
    price: duration === "24h" ? 300 : 220,
    paymentLink: "https://yoomoney.ru/to/4100117907658443",
    paymentConfirmed: true,
    channelMembersCount: 1000,
  };

  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ createAndSaveOrder
    const savedOrder = await createAndSaveOrder(orderData);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã
    await ctx.telegram.sendMessage(
      clientId,
      `–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ (–Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${orderNumber}).`
    );

    await ctx.answerCbQuery("–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞");

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await ctx.telegram.deleteMessage(
      adminId,
      ctx.callbackQuery.message.message_id
    );
  } catch (error) {
    console.error(
      "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
      error
    );
    await ctx.answerCbQuery("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∑–ª–∞–π–∫–∞ (–æ—Ç–∫–∞–∑ –≤ –æ–ø–ª–∞—Ç–µ)
bot.action(/^reject_payment_.+/, async (ctx) => {
  const actionData = ctx.callbackQuery.data.split("_");
  const orderNumber = actionData[2];

  const clientId = bot.context.clientId; // –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞

  // –õ–æ–≥–∏–∫–∞ –æ—Ç–∫–∞–∑–∞ –≤ –æ–ø–ª–∞—Ç–µ (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Ç.–¥.)
  try {
    await ctx.telegram.sendMessage(
      clientId,
      `–û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ (–Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${orderNumber}). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π https://t.me/givencchyy.`
    );

    await ctx.answerCbQuery("–û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞");

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await ctx.telegram.deleteMessage(
      adminId,
      ctx.callbackQuery.message.message_id
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –≤ –æ–ø–ª–∞—Ç–µ:", error);
    await ctx.answerCbQuery("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –≤ –æ–ø–ª–∞—Ç–µ");
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot
  .launch()
  .then(() => {
    console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω");
  })
  .catch((error) => {
    console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞:", error);
  });
